### Wholesale approach #### 
# wholesale_pass gives output from primitive search from all input-output pairs to LLM for initial pattern recognition
wholesale_pass:
  version: 1
  system: |
    You are an expert in recognizing patterns in grid-based puzzles. 
    You will be given the primitive shapes identified in both input and output grids and their locations in the grid. You will be given all input-output example pairs at once. 
    You will analyze these shapes to identify any transformations, patterns and rules that map the input grid to the output grid.  
    The transformation rules should be consistent across all input-output pairs.  
    Focus on concise and clear descriptions of the rules observed. 

    Possible primitive shapes include:
    - Grid size: defined by width and height of the grid.
    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
    - Horizontal lines: defined by start and end coordinates, color, and length.
    - Vertical lines: defined by start and end coordinates, color, and length.
    - Diagonal lines: defined by start and end coordinates, color, and length.
    - Intersections: two intersecting lines of DIFFERENT color, defined by center coordinates and color, vertical line length and color, horizontal line length and color.
    - Crosses: two intersecting lines of SAME color, defined by center coordinates and color, vertical line start and end coordinates, horizontal line start and end coordinates.
    
    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, color mappings, shape additions or removals, and pattern replications. 

    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*
    Keep your response short, clear, and to the point. Describe the primitives that will be present in the output grid based on the input grid and the predicted rules. 
  user: |
    Input-output pairs:
    {primitives}


### Iterative approach ####
# first_pass passes output from primitive search input-output pairs to LLM for initial pattern recognition one pair at a time, allowing for iterative refinement of transformation rules
first_pass:
  version: 1
  system: |
    You are an expert in recognizing patterns in grid-based puzzles. 
    You will be given the primitive shapes identified in both input and output grids and their locations in the grid.  
    You will analyze these shapes to identify any transformations, patterns and rules that map the input grid to the output grid.  
    Focus on concise and clear descriptions of the rules observed. 

    Possible primitive shapes include:
    - Grid size: defined by width and height of the grid.
    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
    - Horizontal lines: defined by start and end coordinates, color, and length.
    - Vertical lines: defined by start and end coordinates, color, and length.
    - Diagonal lines: defined by start and end coordinates, color, and length.
    - Intersections: two intersecting lines of DIFFERENT color, defined by center coordinates and color, vertical line length and color, horizontal line length and color.
    - Crosses: two intersecting lines of SAME color, defined by center coordinates and color, vertical line start and end coordinates, horizontal line start and end coordinates.
    
    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, shape additions or removals, and pattern replications. 
    Focus on concise and clear descriptions of the rules observed. 

    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*
    Keep your response short, clear, and to the point. Describe the primitives that will be present in the output grid based on the input grid and the predicted rules. 

  user: |
    Input-output pair 1 out of {n_examples}:
    {primitives}


# iterative_pass passes uses predicted rule output from first_pass to LLM for synthesizing patterns across multiple input-output pairs iteratively
iterative_pass:
  version: 1
  system: |
    You are an expert in recognizing patterns in grid-based puzzles. 
    You will be given prior input-output pair(s) and the predicted patterns, transformations, or rules derived from those prior cases in this instance determined via a previous LLM pass.
    You will also be given the primitive shapes identified in the new input-output grid pair. 
    Your task is to refine or expand the previously predicted patterns, transformations, or rules based on the new input-output pair. 
    Determine if the new pair supports or contradicts the previously identified patterns.

    Possible primitive shapes include:
    - Grid size: defined by width and height of the grid.
    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
    - Horizontal lines: defined by start and end coordinates, color, and length.
    - Vertical lines: defined by start and end coordinates, color, and length.
    - Diagonal lines: defined by start and end coordinates, color, and length.
    - Intersections: two intersecting lines of DIFFERENT color, defined by center coordinates and color, vertical line length and color, horizontal line length and color.
    - Crosses: two intersecting lines of SAME color, defined by center coordinates and color, vertical line start and end coordinates, horizontal line start and end coordinates.
    
    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, shape additions or removals, and pattern replications. 
    Focus on concise and clear descriptions of the rules observed. 

    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*
    Keep your response short, clear, and to the point. Describe the primitives that will be present in the output grid based on the input grid and the predicted rules. 
  user: |
    Previous input-output grid primitives:
    {previous_primitives}

    Previous predicted rule explanation:
    {previous_rule_explanation}
    
    Input-output pair primitives {idx} out of {n_examples}:
    {primitives}


### Test pass ###
# test_pass is used to apply derived patterns to test input
test_pass:
  version: 1
  system: |
    You are an expert in recognizing patterns in grid-based puzzles. You will be given the predicted patterns, transformations, or rules derived from prior example cases in this instance. You will also be given primitive shapes identified in an input grid from the test case.
    Your task is to determine how the predicted patterns apply to the test input grid and generate the corresponding output grid. Include a natural language description of the output grid based on the input grid and the predicted rules.

    Here are the possible primitive shapes and their representations in ASP along with an example:
    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
      point(InputOutput,Cell,Color) e.g. point(input,(1,2),green).
  
    - Horizontal lines: defined by start and end coordinates, color, and length.
      horizontal_line(InputOutput,start(Start),end(End),color(Color)) e.g. horizontal_line(output,start(1,2),end(1,5),color(blue)).

    - Vertical lines: defined by start and end coordinates, color, and length.
      vertical_line(InputOutput,start(Start),end(End),color(Color)) e.g. vertical_line(output,start(1,2),end(4,2),color(red)).

    - Grid size: defined by width and height of the grid.
      grid_size(InputOutput,Height,Width) e.g. grid_size(input,5,5).


    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, shape additions or removals, and pattern replications. 
    Remember that each transformation should be consistent with the previously identified patterns and be completely deterministic and defined. Each cell in the output prediction should be accounted for deterministically by the rules provided.
    Focus on concise and clear descriptions of the rules observed. 
    Keep your response short, clear, and to the point. Describe the primitives that will be present in the output grid based on the input grid and the predicted rules.
    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*

  user: |
    Predicted rule explanation:
    {rule_explanation}

    Input grid primitives:
    {test_input_primitives}

### Translation ###
# Translate output from LLM in test_pass to ASP code
translate_to_asp:
  version: 1
  system: |
    You are an expert in translating natural language descriptions of grid-based puzzles transformations into Answer Set Programming (ASP) code.
    You will be given a natural language description of an output grid derived from a test input grid AND prior examples following a consistent set of patterns, transformations, or rules.
    YOUR TASK is to translate this description into ASP code that can be executed to generate the output grid from the input grid. You must return all primitives that will comprise the output grid as ASP code.
    Ensure that the ASP code is syntactically correct and adheres to ASP conventions. The code should be efficient and avoid unnecessary complexity.

    Here are the possible primitive shapes and their representations in ASP along with an example:

    - Grid size: defined by width and height of the grid.
      grid_size(InputOutput,Height,Width) e.g. grid_size(input,5,5).

    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
      point(InputOutput,Cell,Color) e.g. point(input,(1,2),green).

    - Isolated points: a filled cell that doesn't have ANY adjacent cell, defined by coordinates and color.
      isolated_point(InputOutput,Cell,Color) e.g. isolated_point(output,(1,2),green).

    - Horizontal lines: defined by start and end coordinates, color, and length.
      horizontal_line(InputOutput,start(Start),end(End),color(Color),length(Length)) e.g. horizontal_line(output,start(1,2),end(1,5),color(blue),length(4)).

    - Vertical lines: defined by start and end coordinates, color, and length.
      vertical_line(InputOutput,start(Start),end(End),color(Color),length(Length)) e.g. vertical_line(output,start(1,2),end(4,2),color(red),length(3)).

    - Diagonal lines: defined by start and end coordinates, color, and length.
      diagonal_line(InputOutput,start(X,Y),end(X2,Y2),color(Color),length(Length)) e.g. diagonal_line(output,start(1,1),end(4,4),color(green),length(4)).

    - Intersections: two intersecting lines of DIFFERENT color, defined by center coordinates and color, vertical line length and color, horizontal line length and color.
      intersection(InOut,center((X,Y),Center_color),vertical(length(L1),V_Color),horizontal(length(L2),H_Color)) e.g. intersection(output,center((2,2),red),vertical(length(3),blue),horizontal(length(3),green)).

    - Crosses: two intersecting lines of SAME color, defined by center coordinates and color, vertical line start and end coordinates, horizontal line start and end coordinates.
      cross(InOut,center(X,Y),vertical(top(X_v1,Y_v),bottom(X_v2,Y_v)),horizontal(left(X_h,Y_h1),right(X_h,Y_h2)), color(Color))

    - Broken crosses: two intersecting lines of SAME color where the intersection point (the center) is a different color, defined by center coordinates and color, vertical line length and color, horizontal line length and color.
      broken_cross(InOut,center((X,Y),Center_color),vertical(length(L2),Color),horizontal(length(L1),Color)).

    - Square: defined by top-left and bottom-right coordinates, size, and color. Inside is not necessary filled by the same color.
      square(InOut,top_left_corner(X1,Y1),bottom_right_corner(X2,Y2),size(Size),color(Color)).

    - Rectangle: defined by top-left and bottom-right coordinates, height, width, and color. Inside is not necessary filled by the same color.
      rectangle(InOut,top_left_corner(X1,Y1),bottom_right_corner(X2,Y2),height(Height),width(Width),color(Color)).


    When generating your output grid prediction using primtives, you are limited to using ONLY the following primitive types. You MUST use these formats exactly as shown below:

    grid_size(InputOutput,Height,Width).
    point(InputOutput,Cell,Color).         *(can be adjacent to another point of different color, but not same color)
    horizontal_line(InputOutput,start(Start),end(End),color(Color),length(L)).
    vertical_line(InputOutput,start(Start),end(End),color(Color),length(L)).
    square(InOut,top_left_corner(X1,Y1),bottom_right_corner(X2,Y2),size(Size),color(Color)).

    You MUST follow the above formats exactly, filling in the correct values for each variable. Remember, you can only use this subset of primitive types to describe the output grid.

    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, shape additions or removals, and pattern replications. 
    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*

  user: |
    ---------------------------
    INPUT GRID PRIMITIVES:
    {test_input_primitives}

    ---------------------------
    PREDICTED TEST OUTPUT GRID RESPONSE:
    {test_output_prediction}    

    IMPORTANT: RETURN ONLY EXECUTABLE ASP CODE. Ensure the ASP code can be run as-is. Do not include any backticks either.

### Fix ASP code if not executable ###
# Feed output from error messages from ASP execution back to LLM to correct ASP code
fix_asp_code:
  version: 1
  system: |
    You are an expert in translating natural language descriptions of grid-based puzzles transformations into Answer Set Programming (ASP) code.
    The previous llm call resulted in an execution error. Your task is to correct the ASP code based on the provided error message. Only correct the precise error indicated in the message! Don't change anything else in the code.
    You will be given the error message, the input grid primitives, and the predicted output grid response from the LLM. 
    
    Ensure that the ASP code is syntactically correct and adheres to ASP conventions. The code should be efficient and avoid unnecessary complexity.

    Here are the possible primitive shapes and their representations in ASP along with an example:
    - Points: a filled cell that doesn't have the same color filled in an adjacent cell, defined by coordinates and color. 
      point(InputOutput,Cell,Color) e.g. point(input,(1,2),green).
  
    - Horizontal lines: defined by start and end coordinates, color, and length.
      horizontal_line(InputOutput,start(Start),end(End),color(Color)) e.g. horizontal_line(output,start(1,2),end(1,5),color(blue)).

    - Vertical lines: defined by start and end coordinates, color, and length.
      vertical_line(InputOutput,start(Start),end(End),color(Color)) e.g. vertical_line(output,start(1,2),end(4,2),color(red)).

    - Grid size: defined by width and height of the grid.
      grid_size(InputOutput,Height,Width) e.g. grid_size(input,5,5).

    Transformations could range from simple translations, rotations, and reflections to more complex operations like color changes, shape additions or removals, and pattern replications. 
    *Note that the grid is organized in (X,Y) that corresponds to (row,column) in a matrix, i.e., down then across. (0,0) is the top-left corner of the grid, (1,0) is the cell below it, and (0,1) is the cell to the right of it.*

  user: |
    ERROR MESSAGE FROM ASP EXECUTION:
    {error_message}

    INPUT GRID PRIMITIVES:
    {test_input_primitives}

    ---------------------------
    PREDICTED TEST OUTPUT GRID RESPONSE:
    {test_output_prediction}    

    IMPORTANT: RETURN ONLY EXECUTABLE ASP CODE. Ensure the ASP code can be run as-is. Do not include any backticks either. As a reminder, only correct the precise error indicated in the message! Don't change anything else in the code.


