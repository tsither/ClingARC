instances/10
Observations / rule (consistent across examples)

- Preserve each isolated gray point from the input as a point in the output at the same coordinates and color.
- For every input isolated gray point at (r,c), add a blue 3×3 square centered on that point:
  - square(output, top_left_corner(r-1,c-1), bottom_right_corner(r+1,c+1), size(3), color(blue))
- Implementation note: if multiple added 3×3 squares share edges, those shared edges may be represented as longer horizontal/vertical/diagonal line primitives in the solver's decomposition, but conceptually the output contains the 3×3 blue squares (and the original gray points).
Input grid:
 isolated_point(input,(1,1),gray) isolated_point(input,(2,7),gray) isolated_point(input,(4,3),gray) isolated_point(input,(7,1),gray) isolated_point(input,(7,5),gray)

Output grid:
 

========================================

Natural language description:
- Keep each gray isolated point at the same coordinates.
- For each gray point at (r,c) add a blue 3×3 square centered on that point (top-left (r-1,c-1) to bottom-right (r+1,c+1)).
- The result is a 9×9 grid containing five blue 3×3 squares (no overlaps) and the original five gray points preserved at their centers.

Primitives in the output grid:
- grid_size(output,9,9).

Preserved gray points:
- point(output,(1,1),gray).
- point(output,(2,7),gray).
- point(output,(4,3),gray).
- point(output,(7,1),gray).
- point(output,(7,5),gray).

Added blue 3×3 squares:
- square(output,top_left_corner(0,0),bottom_right_corner(2,2),size(3),color(blue)).  % centered at (1,1)
- square(output,top_left_corner(1,6),bottom_right_corner(3,8),size(3),color(blue)).  % centered at (2,7)
- square(output,top_left_corner(3,2),bottom_right_corner(5,4),size(3),color(blue)).  % centered at (4,3)
- square(output,top_left_corner(6,0),bottom_right_corner(8,2),size(3),color(blue)).  % centered at (7,1)
- square(output,top_left_corner(6,4),bottom_right_corner(8,6),size(3),color(blue)).  % centered at (7,5)
